timepoints <- names(df)[-1]
checkboxGroupInput("samples", "Select Up to 3 Time Points",
choices = timepoints, selected = timepoints[1:min(3, length(timepoints))])
})
output$vennPlot <- renderPlot({
req(input$samples)
req(length(input$samples) <= 3)
df <- dataInput()
gene_col <- df[[1]]
threshold <- 0
sets <- lapply(input$samples, function(col) {
gene_col[df[[col]] > threshold]
})
names(sets) <- input$samples
grid.newpage()
venn.plot <- venn.diagram(
x = sets,
category.names = input$samples,
filename = NULL,
output = TRUE,
fill = c("skyblue", "pink", "lightgreen")[1:length(sets)]
)
grid.draw(venn.plot)
})
output$summary <- renderPrint({
req(input$samples)
paste("You selected:", paste(input$samples, collapse = ", "))
})
# Sample PCA data
pca_df <- data.frame(
PC1 = rnorm(10),
PC2 = rnorm(10),
Day = sample(1:7, 10, replace = TRUE),
Condition = sample(c("Control", "Treated"), 10, replace = TRUE)
)
pc1_var <- 40
pc2_var <- 25
output$pcaPlot <- renderPlot({
ggplot(pca_df, aes(PC1, PC2, size = Day, shape = Condition, color = Condition)) +
xlab(paste0('PC1 (', pc1_var, '%)')) +
ylab(paste0('PC2 (', pc2_var, '%)')) +
geom_point() +
theme(
axis.text.x = element_text(color = "grey20", size = 16),
axis.text.y = element_text(color = "grey20", size = 16),
axis.title.x = element_text(color = "grey20", size = 22),
axis.title.y = element_text(color = "grey20", size = 22),
plot.title = element_text(size = 22, hjust = 0.5)
)
})
output$download_pca_png <- downloadHandler(
filename = function() paste("pca-plot-", Sys.Date(), ".png", sep = ""),
content = function(file) {
png(file, width = 800, height = 600)
print(
ggplot(pca_df, aes(PC1, PC2, size = Day, shape = Condition, color = Condition)) +
xlab(paste0('PC1 (', pc1_var, '%)')) +
ylab(paste0('PC2 (', pc2_var, '%)')) +
geom_point() +
theme(
axis.text.x = element_text(color = "grey20", size = 16),
axis.text.y = element_text(color = "grey20", size = 16),
axis.title.x = element_text(color = "grey20", size = 22),
axis.title.y = element_text(color = "grey20", size = 22),
plot.title = element_text(size = 22, hjust = 0.5)
)
dev.off()
}
)
output$download_pca_pdf <- downloadHandler(
filename = function() paste("pca-plot-", Sys.Date(), ".pdf", sep = ""),
content = function(file) {
pdf(file, width = 8, height = 6)
print(
ggplot(pca_df, aes(PC1, PC2, size = Day, shape = Condition, color = Condition)) +
xlab(paste0('PC1 (', pc1_var, '%)')) +
ylab(paste0('PC2 (', pc2_var, '%)')) +
geom_point() +
theme(
axis.text.x = element_text(color = "grey20", size = 16),
axis.text.y = element_text(color = "grey20", size = 16),
axis.title.x = element_text(color = "grey20", size = 22),
axis.title.y = element_text(color = "grey20", size = 22),
plot.title = element_text(size = 22, hjust = 0.5)
)
dev.off()
}
)
heatmap_matrix <- reactiveVal(matrix(rnorm(100), nrow = 10))
output$heatmapPlot <- renderPlot({
heatmap.2(heatmap_matrix(),
col = colorRampPalette(c("blue", "white", "red"))(128),
cexCol = 1.0,
cexRow = 1.0,
scale = "row",
dendrogram = "both",
density.info = "histogram",
margins = c(5, 9),
trace = "none")
})
output$download_heatmap_png <- downloadHandler(
filename = function() paste("heatmap-", Sys.Date(), ".png", sep = ""),
content = function(file) {
png(file, width = 800, height = 600)
heatmap.2(heatmap_matrix(),
col = colorRampPalette(c("blue", "white", "red"))(128),
cexCol = 1.0,
cexRow = 1.0,
scale = "row",
dendrogram = "both",
density.info = "histogram",
margins = c(5, 9),
trace = "none")
dev.off()
}
)
output$download_heatmap_pdf <- downloadHandler(
filename = function() paste("heatmap-", Sys.Date(), ".pdf", sep = ""),
content = function(file) {
pdf(file, width = 8, height = 6)
heatmap.2(heatmap_matrix(),
col = colorRampPalette(c("blue", "white", "red"))(128),
cexCol = 1.0,
cexRow = 1.0,
scale = "row",
dendrogram = "both",
density.info = "histogram",
margins = c(5, 9),
trace = "none")
dev.off()
}
)
}
shinyApp(ui = ui, server = server)
runApp('VennPcaHeatmap.R')
runApp('Venn_Diagram.R')
runApp('VennPcaHeatmap.R')
runApp('VennPcaHeatmap copy.R')
runApp('PCAVENAti.R')
# -------------------------
# 1. Load Required Libraries
# -------------------------
library(clusterProfiler)
library(org.Mm.eg.db)
library(pathview)
library(readr)
library(dplyr)
# -------------------------
# 2. Define Input & Output
# -------------------------
gene_file <- "/Users/student/Downloads/Archana/DEGViz/Up.cyto.FHC.txt"  # <-- replace with your gene list file (one gene symbol per line)
output_dir <- "KEGG_output_gene_list"
getwd()
setwd("/Users/student/Downloads/Archana/")
output_dir <- "KEGG_output_gene_list"
dir.create(output_dir, showWarnings = FALSE)
# -------------------------
# 2. Define Input & Output
# -------------------------
gene_file <- "/Users/student/Downloads/Archana/DEGViz/Up.FHC.txt"  # <-- replace with your gene list file (one gene symbol per line)
output_dir <- "KEGG_output_gene_list"
dir.create(output_dir, showWarnings = FALSE)
# -------------------------
# 3. Read Gene List and Map to Entrez IDs
# -------------------------
gene_symbols <- read_lines(gene_file) %>% unique() %>% na.omit()
# Map SYMBOL to ENTREZID
gene_df <- bitr(gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Mm.eg.db)
library(org.Hs.eg.db)
# Map SYMBOL to ENTREZID
gene_df <- bitr(gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# Save unmapped genes
unmapped <- setdiff(gene_symbols, gene_df$SYMBOL)
writeLines(unmapped, file.path(output_dir, "unmapped_genes.txt"))
# -------------------------
# 4. KEGG Enrichment Analysis
# -------------------------
kegg_enrich <- enrichKEGG(
gene = gene_df$ENTREZID,
organism = "mmu",
pvalueCutoff = 0.05
)
# Save full result
enrich_df <- as.data.frame(kegg_enrich@result)
write.csv(enrich_df,
file = file.path(output_dir, "full_KEGG_enrichment_results.csv"),
row.names = FALSE)
# -------------------------
# 2. Define Input & Output
# -------------------------
gene_file <- "/Users/student/Desktop/Dr.K_material/Combine_RNA_Pr_ok/New.C.RNA.Merged/combined_filtered.T2DM.Cytoplasm.txt"  # <-- replace with your gene list file (one gene symbol per line)
output_dir <- "KEGG_output_gene_list"
# -------------------------
# 2. Define Input & Output
# -------------------------
gene_file <- "/Users/student/Desktop/Dr.K_material/Combine_RNA_Pr_ok/New.C.RNA.Merged/combined_filtered.T2DM.Cytoplasm.txt"  # <-- replace with your gene list file (one gene symbol per line)
output_dir <- "KEGG_output_gene_list"
dir.create(output_dir, showWarnings = FALSE)
# -------------------------
# 3. Read Gene List and Map to Entrez IDs
# -------------------------
gene_symbols <- read_lines(gene_file) %>% unique() %>% na.omit()
# Map SYMBOL to ENTREZID
gene_df <- bitr(gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
gene_symbols
data <- read.table(gene_file, header = TRUE, sep = "\t")
# -------------------------
# 2. Define Input & Output
# -------------------------
file <- "/Users/student/Desktop/Dr.K_material/Combine_RNA_Pr_ok/New.C.RNA.Merged/combined_filtered.T2DM.Cytoplasm.txt"  # <-- replace with your gene list file (one gene symbol per line)
output_dir <- "KEGG_output_gene_list"
dir.create(output_dir, showWarnings = FALSE)
data <- read.table(file, header = TRUE, sep = "\t")
gene_file <- data$Gene
gene_file
# -------------------------
# 3. Read Gene List and Map to Entrez IDs
# -------------------------
gene_symbols <- read_lines(gene_file) %>% unique() %>% na.omit()
gene_symbols <-gene_file
# Map SYMBOL to ENTREZID
gene_df <- bitr(gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# Save unmapped genes
unmapped <- setdiff(gene_symbols, gene_df$SYMBOL)
# -------------------------
# 4. KEGG Enrichment Analysis
# -------------------------
kegg_enrich <- enrichKEGG(
gene = gene_df$ENTREZID,
organism = "mmu",
pvalueCutoff = 0.05
)
# Save full result
enrich_df <- as.data.frame(kegg_enrich@result)
# -------------------------
# 1. Load Required Libraries
# -------------------------
library(openxlsx)
library(clusterProfiler)
library(pathview)
library(ggplot2)
# -------------------------
# 2. Set Paths
# -------------------------
file_path <- "/Users/student/Downloads/Archana/BKO_CR_vs_BKO_AL_timepoint10.xlsx"
output_dir <- "/Users/student/Downloads/Archana/BKO_CR_vs_BKO_AL_TP10/KEGG_output1"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
# -------------------------
# 3. Read DEG Data
# -------------------------
up_genes <- read.xlsx(file_path, sheet = "Upregulated")
down_genes <- read.xlsx(file_path, sheet = "Downregulated")
deg_data <- rbind(
data.frame(Gene.ID = up_genes$Gene.ID, log2FC = up_genes$FC),
data.frame(Gene.ID = down_genes$Gene.ID, log2FC = down_genes$FC)
)
deg_data <- na.omit(deg_data)
deg_data <- unique(deg_data)
# -------------------------
# 4. Convert Gene Symbols to Entrez IDs
# -------------------------
gene_df <- bitr(deg_data$Gene.ID,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Mm.eg.db)
# Optional: save unmapped genes
unmapped_genes <- setdiff(deg_data$Gene.ID, gene_df$SYMBOL)
# Merge for enrichment + fold changes
deg_merged <- merge(gene_df, deg_data, by.x = "SYMBOL", by.y = "Gene.ID")
# -------------------------
# 5. KEGG Enrichment Analysis
# -------------------------
kegg_enrich <- enrichKEGG(
gene         = deg_merged$ENTREZID,
organism     = "mmu",            # "hsa" for human
pvalueCutoff = 0.05
)
# -------------------------
# 6. Save Results and Plot Top 10 KEGG Barplot
# -------------------------
if (!is.null(kegg_enrich@result) && nrow(kegg_enrich@result) > 0) {
# Save full result
write.csv(as.data.frame(kegg_enrich@result),
file = file.path(output_dir, "full_KEGG_enrichment_results.csv"),
row.names = FALSE)
# Extract and save top 10
kegg_top10 <- head(kegg_enrich@result[order(kegg_enrich@result$p.adjust), ], 10)
write.csv(kegg_top10,
file = file.path(output_dir, "top10_KEGG_enrichment.csv"),
row.names = FALSE)
# Prepare for barplot
kegg_top10$Description <- factor(kegg_top10$Description,
levels = rev(kegg_top10$Description))
# Plot barplot and save
png(filename = file.path(output_dir, "top10_KEGG_barplot.png"),
width = 1200, height = 800, res = 150)
print(
ggplot(kegg_top10, aes(x = Description, y = -log10(p.adjust))) +
geom_bar(stat = "identity", fill = "#1F77B4") +
coord_flip() +
labs(title = "Top 10 Enriched KEGG Pathways",
x = "Pathway",
y = expression(-log[10]~"(adjusted p-value)")) +
theme_minimal(base_size = 14)
)
dev.off()
# -------------------------
# 7. Generate Pathview Diagrams for Top 10
# -------------------------
gene_fc <- setNames(as.numeric(deg_merged$log2FC), deg_merged$ENTREZID)
gene_fc <- gene_fc[!is.na(gene_fc) & is.finite(gene_fc)]
old_wd <- getwd()
setwd(output_dir)
for (i in seq_len(nrow(kegg_top10))) {
pid <- kegg_top10$ID[i]
desc <- kegg_top10$Description[i]
safe_name <- gsub("[^A-Za-z0-9_\\-]", "_", desc)
tryCatch({
pathview(
gene.data    = gene_fc,
pathway.id   = pid,
species      = "mmu",
out.suffix   = safe_name,
gene.idtype  = "entrez",
limit        = list(gene = 3),
kegg.dir     = output_dir
)
}, error = function(e) {
message(sprintf("❌ Error generating map for %s (%s): %s", desc, pid, e$message))
})
}
setwd(old_wd)
} else {
message("❗ No significant KEGG enrichment results found.")
}
library(pathview)
/Users/student/Downloads/Archana
library(pathview)
BiocManager::install("pathview")
library(pathview)
# -------------------------
# 4. Convert Gene Symbols to Entrez IDs
# -------------------------
gene_df <- bitr(deg_data$Gene.ID,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Mm.eg.db)
# Optional: save unmapped genes
unmapped_genes <- setdiff(deg_data$Gene.ID, gene_df$SYMBOL)
# Merge for enrichment + fold changes
deg_merged <- merge(gene_df, deg_data, by.x = "SYMBOL", by.y = "Gene.ID")
# -------------------------
# 5. KEGG Enrichment Analysis
# -------------------------
kegg_enrich <- enrichKEGG(
gene         = deg_merged$ENTREZID,
organism     = "mmu",            # "hsa" for human
pvalueCutoff = 0.05
)
# -------------------------
# 6. Save Results and Plot Top 10 KEGG Barplot
# -------------------------
if (!is.null(kegg_enrich@result) && nrow(kegg_enrich@result) > 0) {
# Save full result
write.csv(as.data.frame(kegg_enrich@result),
file = file.path(output_dir, "full_KEGG_enrichment_results.csv"),
row.names = FALSE)
# Extract and save top 10
kegg_top10 <- head(kegg_enrich@result[order(kegg_enrich@result$p.adjust), ], 10)
write.csv(kegg_top10,
file = file.path(output_dir, "top10_KEGG_enrichment.csv"),
row.names = FALSE)
# Prepare for barplot
kegg_top10$Description <- factor(kegg_top10$Description,
levels = rev(kegg_top10$Description))
# Plot barplot and save
png(filename = file.path(output_dir, "top10_KEGG_barplot.png"),
width = 1200, height = 800, res = 150)
print(
ggplot(kegg_top10, aes(x = Description, y = -log10(p.adjust))) +
geom_bar(stat = "identity", fill = "#1F77B4") +
coord_flip() +
labs(title = "Top 10 Enriched KEGG Pathways",
x = "Pathway",
y = expression(-log[10]~"(adjusted p-value)")) +
theme_minimal(base_size = 14)
)
dev.off()
# -------------------------
# 7. Generate Pathview Diagrams for Top 10
# -------------------------
gene_fc <- setNames(as.numeric(deg_merged$log2FC), deg_merged$ENTREZID)
gene_fc <- gene_fc[!is.na(gene_fc) & is.finite(gene_fc)]
old_wd <- getwd()
setwd(output_dir)
for (i in seq_len(nrow(kegg_top10))) {
pid <- kegg_top10$ID[i]
desc <- kegg_top10$Description[i]
safe_name <- gsub("[^A-Za-z0-9_\\-]", "_", desc)
tryCatch({
pathview(
gene.data    = gene_fc,
pathway.id   = pid,
species      = "mmu",
out.suffix   = safe_name,
gene.idtype  = "entrez",
limit        = list(gene = 3),
kegg.dir     = output_dir
)
}, error = function(e) {
message(sprintf("❌ Error generating map for %s (%s): %s", desc, pid, e$message))
})
}
setwd(old_wd)
} else {
message("❗ No significant KEGG enrichment results found.")
}
runApp('DEGViz/VennPcaHeatmap copy.R')
runApp('DEGViz/Venn_Diagram.R')
runApp('DEGViz/PCAVENAti.R')
runApp('DEGViz/VennPcaHeatmap copy.R')
runApp('DEGViz/VennPcaHeatmap.R')
runApp('DEGViz/VennPcaHeatmap copy.R')
runApp('DEGViz/VennPCAMerged.R')
runApp('DEGViz/VennPcaHeatmap copy.R')
runApp('DEGViz/VennPcaHeatmap.R')
279+193
'/Users/student/Downloads/Dr.Kim_NtoC result.zip'
/Users/student/Downloads/M10_25up_sort.txt
runApp('DEGViz/VennPcaHeatmap.R')
runApp('~/Desktop/Venn_Diagram.R')
/Users/student/Downloads/DiffSplice/rmats.all.Events/A3SS.MATS.JC.lowFHC.txt
.libPaths()
library(UpSetR)
which R
which rapply(list, function)
which R
runApp('~/Desktop/Venn_Diagram.R')
install.packages("plumber")
library(plumber)
# Load the plumber package
library(plumber)
#* Say hello
#* @param name Your name
#* @get /hello
function(name = "World") {
list(message = paste("Hello,", name))
}
library(plumber)
r <- plumb("api.R")     # Load the API
r$run(port = 8000)      # Run it on http://localhost:8000
# Load the plumber package
library(plumber)
#* Say hello
#* @param name Your name
#* @get /hello
function(name = "World") {
list(message = paste("Hello,", name))
}
library(plumber)
r <- plumb("api.R")     # Load the API
# Load the plumber package
library(plumber)
plumb(file='~/Downloads/api.R')$run()
library(plumber)
r <- plumb("api.R")     # Load the API
library(plumber)
r <- plumb("api.R")     # Load the API
getwd()
cd ..
setwd(""/Users/student/Downloads")
setwd("/Users/student/Downloads/")
setwd("/Users/student/Downloads")
library(plumber)
r <- plumb("api.R")     # Load the API
r$run(port = 8000)      # Run it on http://localhost:8000
setwd("/Users/student/Desktop/AppDEG/backend/degviz_api")
source("plumber.R")
setwd("/Users/student/Desktop/AppDEG/backend/degviz_api")
source("plumber.R")
setwd("/Users/student/Desktop/AppDEG/backend/degviz_api")
source("plumber.R")
library(plumber)
pr <- plumb("plumber.R")
pr$run(port = 8000)
library(plumber)
pr <- plumb("plumber.R")
source("plumber.R")
setwd("/Users/student/Desktop/AppDEG/backend/degviz_api")
getwd()
setwd("/Users/student/Desktop/AppDEG/backend/degviz_api")
source("plumber.R")
file.exists("overlap/venn_core.R")  # should return TRUE
r <- plumber::plumb("plumber.R")
r$run(port = 8000)
library(plumber)
r <- plumber::plumb("plumber.R")
r$run(port = 8000)
source("run_api.R")
q()
